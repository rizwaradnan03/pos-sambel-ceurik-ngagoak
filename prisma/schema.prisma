generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ### ENUMS ###
enum RoleEnum {
  ADMIN
  CASHIER
  INVENTORY
  ANALYTICS
}

enum UnitOfMeasureEnum {
  G
  ML
  PCS
}

enum PaymentTypeEnum {
  CASH
  CARD
  TRANSFER
}

// ### USERS ###
model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     RoleEnum

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum CategoryEnum {
  PRODUCT
  PACKAGE
}

// ### CATEGORIES ###
model Category {
  id    String @id @default(uuid())
  title String
  category CategoryEnum

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ProductCategory ProductCategory[]
  PackageCategory PackageCategory[]

  @@map("categories")
}

// ### PRODUCTS ###
model Product {
  id    String  @id @default(uuid())
  name  String
  image String?
  price Decimal

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ProductCategory   ProductCategory[]
  ProductIngredient ProductIngredient[]
  OrderProduct      OrderProduct[]
  PackageItem       PackageItem[]

  @@map("products")
}

model Package {
  id    String  @id @default(uuid())
  name  String
  image String?
  price Decimal

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  PackageItem     PackageItem[]
  PackageCategory PackageCategory[]
  OrderPackage    OrderPackage[]

  @@map("packages")
}

model PackageCategory {
  id         String  @id @default(uuid())
  categoryId String? @map("category_id")
  packageId  String? @map("package_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Category Category? @relation(fields: [categoryId], references: [id])
  Package  Package?  @relation(fields: [packageId], references: [id])

  @@map("package_categories")
}

model PackageItem {
  id        String  @id @default(uuid())
  packageId String? @map("package_id")
  productId String? @map("product_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Package Package? @relation(fields: [packageId], references: [id])
  Product Product? @relation(fields: [productId], references: [id])

  @@map("package_items")
}

model ProductCategory {
  id         String  @id @default(uuid())
  productId  String? @map("product_id")
  categoryId String? @map("category_id")

  Product  Product?  @relation(fields: [productId], references: [id])
  Category Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_categories")
}

// ### INGREDIENTS ###
model Ingredient {
  id             String            @id @default(uuid())
  name           String
  stock          Decimal
  unitOfMeasure  UnitOfMeasureEnum
  avgCostPerUnit Decimal           @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ProductIngredient  ProductIngredient[]
  LogIngredient      LogIngredient[]
  IngredientPurchase IngredientPurchase[]

  @@map("ingredients")
}

// ### INGREDIENT PURCHASES ###
model IngredientPurchase {
  id           String  @id @default(uuid())
  ingredientId String? @map("ingredient_id")
  quantity     Decimal
  pricePerUnit Decimal @map("price_per_unit")
  totalCost    Decimal @map("total_cost")
  supplier     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Ingredient Ingredient? @relation(fields: [ingredientId], references: [id])

  @@map("ingredient_purchases")
}

// ### LOGS ###
model LogIngredient {
  id           String  @id @default(uuid())
  ingredientId String? @map("ingredient_id")
  description  String

  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  Ingredient Ingredient? @relation(fields: [ingredientId], references: [id])

  @@map("log_ingredients")
}

model ProductIngredient {
  id           String  @id @default(uuid())
  productId    String? @map("product_id")
  ingredientId String? @map("ingredient_id")
  dose         Decimal

  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  Ingredient Ingredient? @relation(fields: [ingredientId], references: [id])
  Product    Product?    @relation(fields: [productId], references: [id])

  @@map("product_ingredients")
}

enum OrderStatusEnum {
  DONE
  ON_PROGRESS
}

model Order {
  id          String          @id @default(uuid())
  customer    String?
  paymentType PaymentTypeEnum
  totalPrice  Decimal
  totalCost   Decimal?
  profit      Decimal?

  orderStatus OrderStatusEnum @default(ON_PROGRESS) @map("order_status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  OrderProduct OrderProduct[]
  LogOrder     LogOrder[]
  OrderPackage OrderPackage[]

  @@map("orders")
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String? @map("order_id")
  productId String? @map("product_id")
  quantity  Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Order   Order?   @relation(fields: [orderId], references: [id])
  Product Product? @relation(fields: [productId], references: [id])

  @@map("order_products")
}

model OrderPackage {
  id        String  @id @default(uuid())
  orderId   String? @map("order_id")
  packageId String? @map("package_id")
  quantity  Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Order   Order?   @relation(fields: [orderId], references: [id])
  Package Package? @relation(fields: [packageId], references: [id])

  @@map("order_packages")
}

model LogOrder {
  id          String  @id @default(uuid())
  orderId     String? @map("order_id")
  description String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Order Order? @relation(fields: [orderId], references: [id])

  @@map("log_orders")
}

model Expense {
  id          String  @id @default(uuid())
  name        String
  amount      Decimal
  category    String
  description String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("expenses")
}
