// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  ADMIN
  CASHIER
}

model User {
  id       String   @id @default(uuid())
  name     String
  role     RoleEnum
  email    String   @unique
  password String

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  @@map("users")
}

model Category {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  ProductCategory ProductCategory[]

  @@map("categories")
}

model Product {
  id    String  @id @default(uuid())
  image String?
  name  String

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  ProductCategory   ProductCategory[]
  ProductIngredient ProductIngredient[]
  OrderProduct      OrderProduct[]

  @@map("products")
}

model ProductCategory {
  id         String  @id @default(uuid())
  productId  String? @map("product_id")
  categoryId String? @map("category_id")

  Product  Product?  @relation(fields: [productId], references: [id])
  Category Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  @@map("product_categories")
}

enum UnitOfMeasureIngredientEnum {
  G
  ML
  PCS
}

model Ingredient {
  id            String                      @id @default(uuid())
  name          String
  stock         String
  unitOfMeasure UnitOfMeasureIngredientEnum @map("unit_of_measure")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  ProductIngredient ProductIngredient[]

  @@map("ingredient")
}

model ProductIngredient {
  id           String  @id @default(uuid())
  productId    String? @map("product_id")
  ingredientId String? @map("ingredient_id")

  dose String

  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  Ingredient Ingredient? @relation(fields: [ingredientId], references: [id])
  Product    Product?    @relation(fields: [productId], references: [id])

  @@map("product_ingredients")
}

enum PaymentTypeEnum {
  CASH
}

model Order {
  id          String          @id @default(uuid())
  name        String
  paymentType PaymentTypeEnum

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  OrderProduct OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String? @map("order_id")
  productId String? @map("product_id")
  pcs       Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Order     Order?   @relation(fields: [orderId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])

  @@map("order_products")
}
